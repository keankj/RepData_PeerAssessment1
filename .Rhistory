advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
advice_data_frame
head(friendship_data_frame)
tail(reports_to_data_frame)
fix(reports_to_data_frame)
attributes <- read.csv('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-Attributes.csv', header=T)
attributes
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
head(advice_data_frame)
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
head(friendship_data_frame)
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
head(reports_to_data_frame)
fix(advice_data_frame)
fix(friendship_data_frame)
fix(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(krack_full_data_frame)
names(krack_full_data_frame)[4:5] <- c("friendship_tie",
"reports_to_tie")
head(krack_full_data_frame)
krack_full_data_frame <- data.frame(ego = advice_data_frame[,1],
alter = advice_data_frame[,2],
advice_tie = advice_data_frame[,3],
friendship_tie = friendship_data_frame[,3],
reports_to_tie = reports_to_data_frame[,3])
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
q()
install.packages("Rstem")
install.packages("tm")
install.packages("wordcloud")
install.packages("c:\\temp\\sentiment_0.2.gz", repos=NULL, type="source")
library(sentiment)
library(wordcloud)
infile <- read.csv("C:\\temp\\UserComments.txt",sep=",",quote="", header=TRUE)
data <- infile$Comment
temp <- as.vector(data)
mydata.corpus <- Corpus(VectorSource(temp))
mydata.corpus <- tm_map(mydata.corpus, tolower)
mydata.corpus <- tm_map(mydata.corpus, removePunctuation)
stopword<-c("","a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your")
mydata.corpus <- tm_map(mydata.corpus, removeWords, stopwords('english'))
mydata.dtm <- TermDocumentMatrix(mydata.corpus)
fterms<-findFreqTerms(mydata.dtm, lowfreq = 2, highfreq = Inf)
fterms<-fterms[1:100]
m <- as.matrix(mydata.dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
png("c:\\temp\\wordcloud_UserComments.png", width=1280, height=800)
wordcloud(d$word, d$freq, scale=c(20,1), min.freq=2, max.words=100, random.order=T, rot.per=.15, vfont=c("sans serif","plain"))
dev.off()
install.packages("stringr")
install.packages("ggplot2")
install.packages("plyr")
install.packages("RColorBrewer")
library(plyr)
library(ggplot2)
library(RColorBrewer)
class_emo = classify_emotion(data, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(data, algorithm="bayes")
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=data, emotion=emotion, polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df, emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by emotion)",
ggplot(sent_df, aes(x=emotion))
class_emo
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(data, algorithm="bayes")
polarity = class_pol[,4]
sent_df = data.frame(text=data, emotion=emotion, polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df, emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by emotion)",
plot.title = theme_text(size=12))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by polarity)",
plot.title = theme_text(size=12))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by polarity)",
plot.title = theme_text(size=12))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by polarity)",
plot.title = theme_text(size=12))
q()
install.packages("igraph")
library(igraph)
install.packages("NetData")
library(NetData)
data(studentnets.S641, package = "NetData")
s641_full_nonzero_edges <- subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
head(s641_full_nonzero_edges)
s641_full <- graph.data.frame(s641_full_nonzero_edges)
summary(s641_full)
write.table(s641_full_nonzero_edges, file="D:\\Temp\\Lab2\\Assets\\Component2\\Gephi_Files\\s641.csv", append=FALSE, quote=FALSE, sep=",", eol="\n", row.names=FALSE, col.names=FALSE)
s641_social <- delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social <- delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
summary(s641_social)
s641_task <- delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task <- delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
summary(s641_task)
social_layout <- layout.fruchterman.reingold(s641_social)
plot(s641_social, layout=social_layout, edge.arrow.size=.5)
task_layout <- layout.fruchterman.reingold(s641_task)
plot(s641_task, layout=task_layout, edge.arrow.size=.5)
plot(s641_task, layout=task_layout, edge.arrow.size=.5)
plot(s641_social, layout=social_layout, edge.arrow.size=.5)
plot(s641_task, layout=task_layout, edge.arrow.size=.5)
plot(s641_task, layout=task_layout, edge.arrow.size=.5)
indegree_social <- degree(s641_social, mode='in')
indegree_social
outdegree_social <- degree(s641_social, mode='out')
outdegree_social
incloseness_social <- closeness(s641_social, mode='in')
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)central_social
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
s641_social_undirected <- as.undirected(s641_social, mode='collapse')ev_obj_social <- evcent(s641_social_undirected)
central_social[order(-central_social$indegree_social),]
q()
install.packages("igraph")
install.packages("NetData")
library(NetData)
data(studentnets.S641, package = "NetData")
s641_full_nonzero_edges <- subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
head(s641_full_nonzero_edges)
s641_full <- graph.data.frame(s641_full_nonzero_edges)
summary(s641_full)
s641_social <- delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
head(s641_full_nonzero_edges)
s641_full <- graph.data.frame(s641_full_nonzero_edges)
install.packages("igraph")
library(igraph)
s641_full <- graph.data.frame(s641_full_nonzero_edges)
head(s641_full_nonzero_edges)
summary(s641_full)
s641_social <- delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social <- delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
summary(s641_social)
s641_task <- delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task <- delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
summary(s641_task)
social_layout <- layout.fruchterman.reingold(s641_social)
plot(s641_social, layout=social_layout, edge.arrow.size=.5)
task_layout <- layout.fruchterman.reingold(s641_task)
plot(s641_task, layout=task_layout, edge.arrow.size=.5)
indegree_social <- degree(s641_social, mode='in')
indegree_social
outdegree_social <- degree(s641_social, mode='out')
outdegree_social
betweenness_social <- betweenness(s641_social)
betweenness_social
s641_social_undirected <- as.undirected(s641_social, mode='collapse')ev_obj_social <- evcent(s641_social_undirected)
s641_social_undirected <- as.undirected(s641_social, mode='collapse')
ev_obj_social <- evcent(s641_social_undirected)
eigen_social <- ev_obj_social$vector
eigen_social
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
outcloseness_social <- closeness(s641_social, mode='out')
outcloseness_social
central_social <- data.frame(V(s641_social)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
central_social
plot(s641_social, vertex.size=10, vertex.label=V(s641_social)$name,
edge.arrow.size = 0.5, layout=layout.fruchterman.reingold,main='Classroom S641 Social Talk')
central_social[order(-central_social$indegree_social),]
central_social[order(-central_social$outdegree_social),]
central_social[order(-central_social$incloseness_social),]
central_social[order(-central_social$outcloseness_social),]
central_social[order(-central_social$eigen_social),]
barplot(central_social$indegree_social, names.arg=central_social$V.s641_social..name)
barplot(central_social$outdegree_social, names.arg=central_social$V.s641_social..name)
barplot(central_social$incloseness_social, names.arg=central_social$V.s641_social..name)
barplot(central_social$outcloseness_social, names.arg=central_social$V.s641_social..name)
barplot(central_social$betweenness_social, names.arg=central_social$V.s641_social..name)
barplot(central_social$eigen_social, names.arg=central_social$V.s641_social..name)
cor(central_social[,2:7])
indegree_task <- degree(s641_task, mode='in')
indegree_task
outdegree_task <- degree(s641_task, mode='out')
outdegree_task
incloseness_task <- closeness(s641_task, mode='in')
incloseness_task
outcloseness_task <- closeness(s641_task, mode='out')
outcloseness_task
betweenness_task <- betweenness(s641_task)
betweenness_task
s641_task_undirected <- as.undirected(s641_task, mode='collapse')
ev_obj_task <- evcent(s641_task_undirected)
eigen_task <-ev_obj_task$vector
eigen_task
central_task <- data.frame(V(s641_task)$name, indegree_task,
central_task <- data.frame(V(s641_task)$name, indegree_task, outdegree_task, incloseness_task, outcloseness_task, betweenness_task, eigen_task)
central_task <- data.frame(V(s641_task)$name, indegree_task, outdegree_task, incloseness_task, outcloseness_task, betweenness_task, eigen_task)
central_task
central_task[order(-central_task$indegree_task),]
central_task[order(-central_task$outdegree_task),]
central_task[order(-central_task$incloseness_task),]
central_task[order(-central_task$outcloseness_task),]
central_task[order(-central_task$eigen_task),]
central_task[order(-central_task$eigen_task),]
barplot(central_task$indegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outdegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outdegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$incloseness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outdegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$indegree_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$outcloseness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$betweenness_task, names.arg=central_task$V.s641_task..name)
barplot(central_task$eigen_task, names.arg=central_task$V.s641_task..name)
q()
install.packages("Rstem")
install.packages("tm")
install.packages("wordcloud")
install.packages("c:\\temp\\sentiment_0.2.tar.gz", repos=NULL, type="source")
library(sentiment)
library(wordcloud)
infile <- read.csv("C:\\temp\\UserComments.txt",sep=",",quote="", header=TRUE)
data <- infile$Comment
temp <- as.vector(data)
mydata.corpus <- Corpus(VectorSource(temp))
mydata.corpus <- tm_map(mydata.corpus, tolower)
mydata.corpus <- tm_map(mydata.corpus, removePunctuation)
stopword<-c("","a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your")
mydata.corpus <- tm_map(mydata.corpus, removeWords, stopwords('english'))
mydata.dtm <- TermDocumentMatrix(mydata.corpus)
fterms<-findFreqTerms(mydata.dtm, lowfreq = 2, highfreq = Inf)
fterms<-fterms[1:100]
m <- as.matrix(mydata.dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
png("c:\\temp\\wordcloud_UserComments2.png", width=1280, height=800)
wordcloud(d$word, d$freq, scale=c(20,1), min.freq=2, max.words=100, random.order=T, rot.per=.15, vfont=c("sans serif","plain"))
dev.off()
png("c:\\temp\\wordcloud_UserComments2.png", width=1280, height=800)
png("c:\\temp\\wordcloud_UserComments.png", width=1280, height=800)
wordcloud(d$word, d$freq, scale=c(20,1), min.freq=2, max.words=100, random.order=T, rot.per=.15, vfont=c("sans serif","plain"))
dev.off()
install.packages("stringr")
install.packages("ggplot2")
install.packages("plyr")
install.packages("RColorBrewer")
library(plyr)
library(ggplot2)
library(RColorBrewer)
class_emo = classify_emotion(data, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(data, algorithm="bayes")
polarity = class_pol[,4]
sent_df = data.frame(text=data, emotion=emotion, polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df, emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by emotion)",
plot.title = theme_text(size=12))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="Number of Comments") +
opts(title = "Sentiment Analysis of User Comments\n(classification by emotion)",
plot.title = theme_text(size=12))
q()
dataset1 = read.table("C:\\temp\\Newman-Cond_mat_95-99-co_occurrence.txt",sep=" ",quote="", header=FALSE)
dataset2 = read.table("C:\\temp\\Newman-Cond_mat_95-99-Author_names.txt",sep=" ",quote="", header=FALSE)
merged_data = merge(dataset1, dataset2, by=1:1)
colnames(merged_data) <- c("Author1_ID", "Author2_ID", "Num_of_books_published", "Author1_FirstName", "Author1_LastName")
merged_data[merged_data[, "Num_of_books_published"] == max(merged_data$Num_of_books_published),]
install.packages("igraph")
library(igraph)
merged_dataGraph <- graph.data.frame(merged_data)
published <- delete.edges(merged_dataGraph, E(merged_dataGraph)[get.edge.attribute(merged_dataGraph,name = "Num_of_books_published")==0])
published <- delete.vertices(published, V(published)[degree(published)==0])
indegree_social <- degree(published, mode='in')
indegree_social
outdegree_social <- degree(published, mode='out')
outdegree_social
incloseness_social <- closeness(published, mode='in')
incloseness_social
outcloseness_social <- closeness(published, mode='out')
outcloseness_social
betweenness_social <- betweenness(published)
betweenness_social
s641_social_undirected <- as.undirected(published, mode='collapse')
ev_obj_social <- evcent(s641_social_undirected)
eigen_social <- ev_obj_social$vector
central_social <- data.frame(V(published)$name, indegree_social, outdegree_social, incloseness_social, outcloseness_social, betweenness_social, eigen_social)
central_social
central_social[order(-central_social$indegree_social),]
central_social[order(-central_social$outdegree_social),]
central_social[order(-central_social$incloseness_social),]
central_social[order(-central_social$outcloseness_social),]
central_social[order(-central_social$eigen_social),]
cor(central_social[,2:7])
published_layout <- layout.fruchterman.reingold(published)
plot(published, layout=published_layout, edge.arrow.size=.5)
published_layout <- layout.fruchterman.reingold(published)
q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
print(my_sqrt)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
data <- c(21.7,7.0,15.8,11.6,8.9)
summary(data)
var(data)
quartile(data)
quantile(data)
cls
clear
data <- c(21.7,7.0,15.8,11.6,8.9)
summary(data)
var(data)
quantile(data)
IQR(data)
data <- c(8.7,9.8,17.3,9.8,13.9,9.8,7.9,7.7,10.4,6.2,5.8,15.8,17.1,19.9,15.1,16.8)
summary(data)
quantile(data)
boxplot(data)
var(data)
IQR(data)
setwd("C:/Users/kean.kwok.2011/OneDrive/Coursera/Reproducible Research/Peer Assessment 1/RepData_PeerAssessment1")
data <- read.csv("activity.csv", header=TRUE)
View(data)
